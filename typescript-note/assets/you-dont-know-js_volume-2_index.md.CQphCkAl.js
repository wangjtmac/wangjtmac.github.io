import{_ as e,c as i,o as t,ag as l}from"./chunks/framework.C6BsaGkr.js";const u=JSON.parse('{"title":"第二卷（中卷）","description":"","frontmatter":{},"headers":[],"relativePath":"you-dont-know-js/volume-2/index.md","filePath":"you-dont-know-js/volume-2/index.md","lastUpdated":1755504345000}'),r={name:"you-dont-know-js/volume-2/index.md"};function o(n,a,s,d,c,m){return t(),i("div",null,a[0]||(a[0]=[l('<h1 id="第二卷-中卷" tabindex="-1">第二卷（中卷） <a class="header-anchor" href="#第二卷-中卷" aria-label="Permalink to &quot;第二卷（中卷）&quot;">​</a></h1><p>主题：</p><ul><li>类型与语法（Types &amp; Grammar）</li><li>异步与性能（Async &amp; Performance）</li></ul><h2 id="你将学到" tabindex="-1">你将学到 <a class="header-anchor" href="#你将学到" aria-label="Permalink to &quot;你将学到&quot;">​</a></h2><ul><li>JS 中“类型”的真实含义与坑：装箱、ToPrimitive、相等性</li><li>语法语义与引擎行为：声明提升、严格模式、隐式转换</li><li>事件循环、任务队列、微任务与宏任务</li><li>性能优化与异步模式（回调、Promise、async/await）</li></ul><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li><a href="./types-grammar.html">类型和语法</a></li><li><a href="./async-performance.html">异步和性能</a></li></ul><h2 id="与-typescript-的映射" tabindex="-1">与 TypeScript 的映射 <a class="header-anchor" href="#与-typescript-的映射" aria-label="Permalink to &quot;与 TypeScript 的映射&quot;">​</a></h2><ul><li>TS 类型是静态层面的“约束/推导”，JS 类型是运行时的“行为与表示”</li><li>掌握 JS 值/类型细节，有助于写出更契合引擎的 TS 类型与 API</li></ul>',9)]))}const h=e(r,[["render",o]]);export{u as __pageData,h as default};
