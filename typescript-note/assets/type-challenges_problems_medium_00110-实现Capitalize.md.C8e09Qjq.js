import{_ as t,c as l,o as p,ag as i,j as s,a as n,t as h}from"./chunks/framework.C6BsaGkr.js";const m=JSON.parse('{"title":"00110 - 实现Capitalize","description":"","frontmatter":{},"headers":[],"relativePath":"type-challenges/problems/medium/00110-实现Capitalize.md","filePath":"type-challenges/problems/medium/00110-实现Capitalize.md","lastUpdated":1757560412000}'),r={name:"type-challenges/problems/medium/00110-实现Capitalize.md"},k={id:"frontmatter-title",tabindex:"-1"};function d(e,a,o,c,g,y){return p(),l("div",null,[a[1]||(a[1]=i(`<p><a href="/typescript-note/type-challenges/medium.html">← 返回 Medium 目录</a></p><blockquote><p>内容来源：yuzai/type-challenge（110-实现Capitalize.md） 原文链接：<a href="https://raw.githubusercontent.com/yuzai/type-challenge/main/docs/type-challenges/problems/medium/00110-%E5%AE%9E%E7%8E%B0Capitalize" target="_blank" rel="noreferrer">https://raw.githubusercontent.com/yuzai/type-challenge/main/docs/type-challenges/problems/medium/00110-实现Capitalize</a></p></blockquote><h1 id="_00110-实现capitalize" tabindex="-1">00110 - 实现Capitalize <a class="header-anchor" href="#_00110-实现capitalize" aria-label="Permalink to &quot;00110 - 实现Capitalize&quot;">​</a></h1><hr><h2 id="title-110-实现capitalizelang-zh-cn" tabindex="-1">title: 110-实现Capitalize lang: zh-CN <a class="header-anchor" href="#title-110-实现capitalizelang-zh-cn" aria-label="Permalink to &quot;title: 110-实现Capitalize
lang: zh-CN&quot;">​</a></h2>`,5)),s("h1",k,[n(h(e.$frontmatter.title)+" ",1),a[0]||(a[0]=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),a[2]||(a[2]=i('<h2 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;题目描述&quot;">​</a></h2><p>实现 <code>Capitalize&lt;T&gt;</code> 它将字符串的第一个字母转换为大写，其余字母保持原样。</p><p>例如</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> capitalized</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Capitalize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello world&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// expected to be &#39;Hello world&#39;</span></span></code></pre></div><h2 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h2><p>思路其实比较简单，就是找到第一个字符，大写之后和其余字符拼接即可。</p><p>这里值得一提的是 ts 本身自带这个方法，可以参考<a href="https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html#uppercasestringtype" target="_blank" rel="noreferrer">官方文档</a>，但是其定义的地方是 intrinsic，我们看不到。</p><p>同时 Ts 还自带了大写整个字符的方法 Uppercase， 想要实现本题目，可以通过推断匹配的方式选出第一个字符后，大写该字符，并和原字符拼接即可。</p><h2 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCapitalize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">infer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> F</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">infer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}`</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Uppercase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">F</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}`</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="知识点" tabindex="-1">知识点 <a class="header-anchor" href="#知识点" aria-label="Permalink to &quot;知识点&quot;">​</a></h2><ol><li>字符串推断匹配： <code>A extends `${infer F}${infer R}` </code></li></ol><hr><div class="nav-pager"><span>上一题：<a href="/type-challenges/problems/type-challenges/problems/medium/00108-实现Trim">00108 实现Trim</a></span><span style="float:right;">下一题：<a href="/type-challenges/problems/type-challenges/problems/medium/00116-实现Replace">00116 实现Replace</a></span></div>',14))])}const C=t(r,[["render",d]]);export{m as __pageData,C as default};
