import{_ as e,c as n,o as l,ag as i,j as a,a as h,t as p}from"./chunks/framework.C6BsaGkr.js";const F=JSON.parse('{"title":"00002 - 获取函数返回类型","description":"","frontmatter":{},"headers":[],"relativePath":"type-challenges/problems/medium/00002-获取函数返回类型.md","filePath":"type-challenges/problems/medium/00002-获取函数返回类型.md","lastUpdated":1755503905000}'),k={name:"type-challenges/problems/medium/00002-获取函数返回类型.md"},r={id:"frontmatter-title",tabindex:"-1"};function d(t,s,g,o,y,c){return l(),n("div",null,[s[1]||(s[1]=i(`<p><a href="/typescript-note/type-challenges/medium.html">← 返回 Medium 目录</a></p><blockquote><p>内容来源：yuzai/type-challenge（2-获取函数返回类型.md） 原文链接：<a href="https://raw.githubusercontent.com/yuzai/type-challenge/main/docs/type-challenges/problems/medium/00002-%E8%8E%B7%E5%8F%96%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B" target="_blank" rel="noreferrer">https://raw.githubusercontent.com/yuzai/type-challenge/main/docs/type-challenges/problems/medium/00002-获取函数返回类型</a></p></blockquote><h1 id="_00002-获取函数返回类型" tabindex="-1">00002 - 获取函数返回类型 <a class="header-anchor" href="#_00002-获取函数返回类型" aria-label="Permalink to &quot;00002 - 获取函数返回类型&quot;">​</a></h1><hr><h2 id="title-2-获取函数返回类型lang-zh-cn" tabindex="-1">title: 2-获取函数返回类型 lang: zh-CN <a class="header-anchor" href="#title-2-获取函数返回类型lang-zh-cn" aria-label="Permalink to &quot;title: 2-获取函数返回类型
lang: zh-CN&quot;">​</a></h2>`,5)),a("h1",r,[h(p(t.$frontmatter.title)+" ",1),s[0]||(s[0]=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),s[2]||(s[2]=i(`<h2 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;题目描述&quot;">​</a></h2><p>不使用 <code>ReturnType</code> 实现 TypeScript 的 <code>ReturnType&lt;T&gt;</code> 泛型。</p><p>例如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (v) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyReturnType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fn&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 应推导出 &quot;1 | 2&quot;</span></span></code></pre></div><h2 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h2><p>这题放在 medium 着实有点难堪，因为其实现方式和<a href="/typescript-note/type-challenges/problems/easy/03312-parameters.html">实现 Parameters</a> 一致，甚至还相对简单。</p><p>核心还是利用 推断匹配的套路，只是推断的位置不同。</p><h2 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyReturnType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> infer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> R</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> R</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> never</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 下面的写法是错误的，因为限制了不能有参数，当函数有参数时，会走 false 逻辑，返回 never</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// type MyReturnType&lt;T&gt; = T extends () =&gt; infer R ? R : never;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// number</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyReturnType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span></code></pre></div><p>这里需要注意的，是参数的写法，因为并不限制有多少参数，也不限制参数的类型，所以可能会理所当然的认为不写参数就可以了，但是实际上不写参数就对应着没有参数，那么就会导致类型判断出错，走了 false 逻辑。</p><h2 id="知识点" tabindex="-1">知识点 <a class="header-anchor" href="#知识点" aria-label="Permalink to &quot;知识点&quot;">​</a></h2><ol><li>推断匹配可以用在函数的返回类型上</li><li>对函数的入参没有限制时，不能为空，可以写 <code>...args: any[]</code> 或者 <code>...args: unknown[]</code></li></ol><hr><div class="nav-pager"><span>上一题：<a href="/type-challenges/medium">返回目录</a></span><span style="float:right;">下一题：<a href="/type-challenges/problems/type-challenges/problems/medium/00003-实现Omit">00003 实现Omit</a></span></div>`,14))])}const m=e(k,[["render",d]]);export{F as __pageData,m as default};
