import{_ as t,c as l,o as n,ag as i,j as a,a as h,t as r}from"./chunks/framework.C6BsaGkr.js";const E=JSON.parse('{"title":"00298 - 计算字符的长度","description":"","frontmatter":{},"headers":[],"relativePath":"type-challenges/problems/medium/00298-计算字符的长度.md","filePath":"type-challenges/problems/medium/00298-计算字符的长度.md","lastUpdated":1757560412000}'),p={name:"type-challenges/problems/medium/00298-计算字符的长度.md"},k={id:"frontmatter-title",tabindex:"-1"};function d(e,s,o,g,c,y){return n(),l("div",null,[s[1]||(s[1]=i(`<p><a href="/typescript-note/type-challenges/medium.html">← 返回 Medium 目录</a></p><blockquote><p>内容来源：yuzai/type-challenge（298-计算字符的长度.md） 原文链接：<a href="https://raw.githubusercontent.com/yuzai/type-challenge/main/docs/type-challenges/problems/medium/00298-%E8%AE%A1%E7%AE%97%E5%AD%97%E7%AC%A6%E7%9A%84%E9%95%BF%E5%BA%A6" target="_blank" rel="noreferrer">https://raw.githubusercontent.com/yuzai/type-challenge/main/docs/type-challenges/problems/medium/00298-计算字符的长度</a></p></blockquote><h1 id="_00298-计算字符的长度" tabindex="-1">00298 - 计算字符的长度 <a class="header-anchor" href="#_00298-计算字符的长度" aria-label="Permalink to &quot;00298 - 计算字符的长度&quot;">​</a></h1><hr><h2 id="title-298-计算字符的长度lang-zh-cn" tabindex="-1">title: 298-计算字符的长度 lang: zh-CN <a class="header-anchor" href="#title-298-计算字符的长度lang-zh-cn" aria-label="Permalink to &quot;title: 298-计算字符的长度
lang: zh-CN&quot;">​</a></h2>`,5)),a("h1",k,[h(r(e.$frontmatter.title)+" ",1),s[0]||(s[0]=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),s[2]||(s[2]=i('<h2 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;题目描述&quot;">​</a></h2><p>计算字符串的长度，类似于 <code>String#length</code> 。</p><h2 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h2><p>在 ts 中，元组的长度可以直接使用 <code>T[&#39;length&#39;]</code> 获取，字符并没有这样的方法，但是可以通过遍历字符，来将其转换成元组即可通过 length 索引进行访问。字符的遍历 在 <a href="/typescript-note/type-challenges/problems/medium/00106-实现TrimLeft.html">实现 TrimLeft</a> 中提到过。不再赘述</p><h2 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LengthOfString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [],</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">infer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}`</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LengthOfString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">R</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;length&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><p>这里通过递归遍历整个字符，当剩余字符长度为 0 时，返回遍历的字符的长度。这里由于正常遍历时，是感知不到整个字符的元组的，所以通过 Arr 参数将遍历过的元素存起来，以便在递归结束时进行返回 <code>Arr[&#39;length&#39;]</code></p><h2 id="知识点" tabindex="-1">知识点 <a class="header-anchor" href="#知识点" aria-label="Permalink to &quot;知识点&quot;">​</a></h2><ol><li>递归嵌套，中间参数的传递</li><li>字符遍历： <code>A extends `${string}${infer R}` </code></li><li>用元组记录长度</li></ol><hr><div class="nav-pager"><span>上一题：<a href="/type-challenges/problems/type-challenges/problems/medium/00296-实现全排列">00296 实现全排列</a></span><span style="float:right;">下一题：<a href="/type-challenges/problems/type-challenges/problems/medium/00459-实现Flatten">00459 实现Flatten</a></span></div>',11))])}const F=t(p,[["render",d]]);export{E as __pageData,F as default};
