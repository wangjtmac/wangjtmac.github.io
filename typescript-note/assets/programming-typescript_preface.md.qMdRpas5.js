import{_ as a,c as s,o as t,ag as e}from"./chunks/framework.C6BsaGkr.js";const d=JSON.parse('{"title":"《Programming TypeScript》前言","description":"","frontmatter":{},"headers":[],"relativePath":"programming-typescript/preface.md","filePath":"programming-typescript/preface.md","lastUpdated":1752020886000}'),n={name:"programming-typescript/preface.md"};function l(p,i,r,h,o,k){return t(),s("div",null,i[0]||(i[0]=[e(`<h1 id="《programming-typescript》前言" tabindex="-1">《Programming TypeScript》前言 <a class="header-anchor" href="#《programming-typescript》前言" aria-label="Permalink to &quot;《Programming TypeScript》前言&quot;">​</a></h1><h2 id="前言-preface" tabindex="-1">前言 (Preface) <a class="header-anchor" href="#前言-preface" aria-label="Permalink to &quot;前言 (Preface)&quot;">​</a></h2><p>《Programming TypeScript》是由 Boris Cherny 编写的一本关于 TypeScript 的权威指南。本章节将介绍书籍的前言部分，帮助读者了解书籍的目标、结构和学习方法。</p><h3 id="主要内容" tabindex="-1">主要内容 <a class="header-anchor" href="#主要内容" aria-label="Permalink to &quot;主要内容&quot;">​</a></h3><ul><li>本书适用于已经熟悉 JavaScript 并希望学习 TypeScript 的开发者</li><li>TypeScript 是 JavaScript 的超集，添加了可选的静态类型系统</li><li>书中示例代码使用 TypeScript 3.3 版本</li><li>书籍组织为 12 个章节，从 TypeScript 基础到高级应用</li></ul><h3 id="重要概念" tabindex="-1">重要概念 <a class="header-anchor" href="#重要概念" aria-label="Permalink to &quot;重要概念&quot;">​</a></h3><ul><li><strong>TypeScript 的核心价值</strong>：在编译时捕获错误，而不是运行时</li><li><strong>渐进式类型化</strong>：可以逐步将 JavaScript 代码转换为 TypeScript</li><li><strong>类型安全</strong>：通过静态类型检查提高代码质量和可维护性</li></ul><h3 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：如果你不熟悉 JavaScript，这里有一个例子</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果你有一个对象 o，想要添加属性 k 并赋值为 3，有两种方式：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 直接修改对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o.k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 创建一个新对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o, k: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span></code></pre></div><h2 id="补充说明-conventions-used-in-this-book" tabindex="-1">补充说明 (Conventions Used in This Book) <a class="header-anchor" href="#补充说明-conventions-used-in-this-book" aria-label="Permalink to &quot;补充说明 (Conventions Used in This Book)&quot;">​</a></h2><h3 id="主要内容-1" tabindex="-1">主要内容 <a class="header-anchor" href="#主要内容-1" aria-label="Permalink to &quot;主要内容&quot;">​</a></h3><ul><li>书中使用特定的排版约定来区分不同类型的信息</li><li>代码示例使用等宽字体，输出使用等宽粗体</li><li>代码注释中使用 <code>// ...</code> 表示省略的代码</li><li>使用特殊图标标记提示、警告和注意事项</li></ul><h3 id="重要概念-1" tabindex="-1">重要概念 <a class="header-anchor" href="#重要概念-1" aria-label="Permalink to &quot;重要概念&quot;">​</a></h3><ul><li><strong>TypeScript 与 JavaScript 的关系</strong>：TypeScript 是 JavaScript 的超集，添加了类型系统</li><li><strong>代码约定</strong>：书中推荐使用特定的代码风格和实践</li><li><strong>类型注解</strong>：在变量、参数和返回值上添加类型信息</li></ul><h3 id="代码示例-1" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例-1" aria-label="Permalink to &quot;代码示例&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TypeScript 代码示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="学习要点" tabindex="-1">学习要点 <a class="header-anchor" href="#学习要点" aria-label="Permalink to &quot;学习要点&quot;">​</a></h2><ul><li>TypeScript 是 JavaScript 的超集，任何有效的 JavaScript 代码也是有效的 TypeScript 代码</li><li>学习 TypeScript 需要先熟悉 JavaScript</li><li>TypeScript 提供了编译时类型检查，可以捕获许多运行时错误</li><li>理解书中使用的排版约定有助于更好地阅读和理解内容</li><li>TypeScript 代码示例是学习的重要部分，应该动手实践</li><li>关注书中的提示、警告和注意事项，它们包含重要的实践经验</li><li>TypeScript 的学习应该结合实际项目和应用场景</li></ul>`,18)]))}const g=a(n,[["render",l]]);export{d as __pageData,g as default};
