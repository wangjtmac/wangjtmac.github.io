import{_ as e,c as l,o as n,ag as i,j as a,a as h,t as p}from"./chunks/framework.C6BsaGkr.js";const F=JSON.parse('{"title":"04471 - 实现Zip","description":"","frontmatter":{},"headers":[],"relativePath":"type-challenges/problems/medium/04471-实现Zip.md","filePath":"type-challenges/problems/medium/04471-实现Zip.md","lastUpdated":1757560412000}'),k={name:"type-challenges/problems/medium/04471-实现Zip.md"},r={id:"frontmatter-title",tabindex:"-1"};function d(t,s,o,g,E,y){return n(),l("div",null,[s[1]||(s[1]=i(`<p><a href="/typescript-note/type-challenges/medium.html">← 返回 Medium 目录</a></p><blockquote><p>内容来源：yuzai/type-challenge（4471-实现Zip.md） 原文链接：<a href="https://raw.githubusercontent.com/yuzai/type-challenge/main/docs/type-challenges/problems/medium/04471-%E5%AE%9E%E7%8E%B0Zip" target="_blank" rel="noreferrer">https://raw.githubusercontent.com/yuzai/type-challenge/main/docs/type-challenges/problems/medium/04471-实现Zip</a></p></blockquote><h1 id="_04471-实现zip" tabindex="-1">04471 - 实现Zip <a class="header-anchor" href="#_04471-实现zip" aria-label="Permalink to &quot;04471 - 实现Zip&quot;">​</a></h1><hr><h2 id="title-4471-实现ziplang-zh-cn" tabindex="-1">title: 4471-实现Zip lang: zh-CN <a class="header-anchor" href="#title-4471-实现ziplang-zh-cn" aria-label="Permalink to &quot;title: 4471-实现Zip
lang: zh-CN&quot;">​</a></h2>`,5)),a("h1",r,[h(p(t.$frontmatter.title)+" ",1),s[0]||(s[0]=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),s[2]||(s[2]=i(`<h2 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;题目描述&quot;">​</a></h2><p>In This Challenge, You should implement a type <code>Zip&lt;T, U&gt;</code>, T and U must be <code>Tuple</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Zip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// expected to be [[1, true], [2, false]]</span></span></code></pre></div><h2 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h2><p>这题看起来比较简单，输入两个元组，合并后生成新的元组。</p><p>实际也确实不难，只需要对元组遍历即可。只需要考虑元组数量不一致的特殊场景即可，根据用例的意思，任意一方长度不足，另一方多出来的元素均舍弃。</p><h2 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Zip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">U</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">infer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...infer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> U</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">infer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...infer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ?</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // TF, UF 均存在的情况下，生成 [TF, UF]，并递归处理剩余元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      [[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Zip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    :</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 否则，直接返回 []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  :</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 否则，直接返回 []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [];</span></span></code></pre></div><h2 id="知识点" tabindex="-1">知识点 <a class="header-anchor" href="#知识点" aria-label="Permalink to &quot;知识点&quot;">​</a></h2><ol><li>元组遍历老套路: <code>A extends [infer F, ...R]</code>。</li></ol><hr><div class="nav-pager"><span>上一题：<a href="/type-challenges/problems/type-challenges/problems/medium/04425-实现比较">04425 实现比较</a></span><span style="float:right;">下一题：<a href="/type-challenges/problems/type-challenges/problems/medium/04484-isUnion">04484 isUnion</a></span></div>`,12))])}const m=e(k,[["render",d]]);export{F as __pageData,m as default};
