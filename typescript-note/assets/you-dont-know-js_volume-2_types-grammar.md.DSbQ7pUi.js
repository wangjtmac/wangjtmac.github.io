import{_ as i,c as a,o as l,ag as t}from"./chunks/framework.C6BsaGkr.js";const o=JSON.parse('{"title":"类型和语法（Types & Grammar）","description":"","frontmatter":{},"headers":[],"relativePath":"you-dont-know-js/volume-2/types-grammar.md","filePath":"you-dont-know-js/volume-2/types-grammar.md","lastUpdated":1755504345000}'),h={name:"you-dont-know-js/volume-2/types-grammar.md"};function n(e,s,p,k,r,d){return l(),a("div",null,s[0]||(s[0]=[t(`<h1 id="类型和语法-types-grammar" tabindex="-1">类型和语法（Types &amp; Grammar） <a class="header-anchor" href="#类型和语法-types-grammar" aria-label="Permalink to &quot;类型和语法（Types &amp; Grammar）&quot;">​</a></h1><h2 id="一、类型与值" tabindex="-1">一、类型与值 <a class="header-anchor" href="#一、类型与值" aria-label="Permalink to &quot;一、类型与值&quot;">​</a></h2><ul><li>JS 有 7 种内建类型：number、string、boolean、null、undefined、object、symbol（+ bigint）</li><li>typeof 的边界：typeof null === &#39;object&#39; 是历史遗留</li><li>装箱对象：new String(&#39;x&#39;) 与 &#39;x&#39; 的差异；注意避免滥用</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // &#39;object&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;object&#39;（数组是对象的一个子类型）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;[object Array]&#39;</span></span></code></pre></div><h2 id="二、相等性与隐式转换" tabindex="-1">二、相等性与隐式转换 <a class="header-anchor" href="#二、相等性与隐式转换" aria-label="Permalink to &quot;二、相等性与隐式转换&quot;">​</a></h2><ul><li>== 抽象相等有一套复杂规则，建议优先使用 ===</li><li>ToPrimitive/ToNumber/ToString 在 +、== 等运算中触发</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // true（[] -&gt; &#39;&#39; -&gt; 0）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span></code></pre></div><h2 id="三、语法要点" tabindex="-1">三、语法要点 <a class="header-anchor" href="#三、语法要点" aria-label="Permalink to &quot;三、语法要点&quot;">​</a></h2><ul><li>声明提升：函数声明整体提升，变量声明只提升标识符</li><li>严格模式：消除静默失败，this 默认不再指向全局</li><li>try/catch 的作用域细节：catch 绑定具备块级作用域</li></ul><h2 id="四、与-typescript-的关系" tabindex="-1">四、与 TypeScript 的关系 <a class="header-anchor" href="#四、与-typescript-的关系" aria-label="Permalink to &quot;四、与 TypeScript 的关系&quot;">​</a></h2><ul><li>TS 不改变 JS 的运行时语义，隐式转换规则依旧成立</li><li>类型注解不会影响 +、== 的行为；应通过类型约束减少这类用法</li><li>合理设计 API 类型，弱化“魔法转换”的机会</li></ul><h2 id="练习-含答案" tabindex="-1">练习（含答案） <a class="header-anchor" href="#练习-含答案" aria-label="Permalink to &quot;练习（含答案）&quot;">​</a></h2><h3 id="简单" tabindex="-1">简单 <a class="header-anchor" href="#简单" aria-label="Permalink to &quot;简单&quot;">​</a></h3><ol><li>判断输出并解释</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [])      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [])     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ?</span></span></code></pre></div><p>答案：</p><ul><li>3 + [] -&gt; &#39;3&#39;（ToPrimitive 对 [] 生成 &#39;&#39;，字符串拼接）</li><li>[] == 0 -&gt; true（[] -&gt; &#39;&#39; -&gt; 0）</li><li>[1] == 1 -&gt; true（[1] -&gt; &#39;1&#39; -&gt; 1）</li><li>{} + [] -&gt; &#39;[object Object]&#39;（在表达式起始位置 {} 可能被当成空块；此处以一元 + 的右操作数为 []，最终为字符串拼接；各引擎/上下文差异可通过加括号明确：({} + [])）</li></ul><ol start="2"><li>typeof 边界</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ?</span></span></code></pre></div><p>答案：</p><ul><li>typeof null -&gt; &#39;object&#39;（历史遗留）</li><li>toString.call(null) -&gt; &#39;[object Null]&#39;（更精确）</li></ul><h3 id="挑战" tabindex="-1">挑战 <a class="header-anchor" href="#挑战" aria-label="Permalink to &quot;挑战&quot;">​</a></h3><ol start="3"><li>判断下列相等式，并写出 safer 的替代</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NaN</span></span></code></pre></div><p>答案与替代：</p><ul><li>&#39;&#39; == 0 -&gt; true；改用 Number(&#39;&#39;) === 0 或直接避免比较，用长度判断</li><li>false == &#39;0&#39; -&gt; true；改用 Boolean(Number(&#39;0&#39;)) 且明确转换后再用 ===</li><li>[0] == false -&gt; true；明确转换：Number([0]) === 0 &amp;&amp; false === false</li><li>null == undefined -&gt; true；推荐用 x == null 检查“空值”，或显式 x === null || x === undefined</li><li>NaN == NaN -&gt; false；用 Number.isNaN(x)</li></ul><ol start="4"><li>写出一个 + 运算的 ToPrimitive 陷阱案例并修正</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ?</span></span></code></pre></div><p>答案：</p><ul><li>输出 2（优先 valueOf -&gt; 1，再与 1 相加），或在某些情况下触发字符串拼接</li><li>修正：显式转换 Number(obj) + 1 或 String(obj) + &#39;1&#39;，根据意图选择</li></ul><h3 id="进阶挑战-含答案" tabindex="-1">进阶挑战（含答案） <a class="header-anchor" href="#进阶挑战-含答案" aria-label="Permalink to &quot;进阶挑战（含答案）&quot;">​</a></h3><ol start="5"><li>{} + [] 与 [] + {}</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span></code></pre></div><p>答案：</p><ul><li>{} + [] -&gt; &#39;[object Object]&#39;（行首 {} 可能被解析为空块；更稳妥写法：({} + [])）</li><li>[] + {} -&gt; &#39;[object Object]&#39;（[] -&gt; &#39;&#39;，{} -&gt; &#39;[object Object]&#39;，字符串拼接）</li></ul><ol start="6"><li>Double equals 黑名单 请指出下列表达式的结果，并给出统一的更安全方案：</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span></span></code></pre></div><p>答案：true、true、true。统一方案：在比较前做显式转换（Number/String/Boolean），最终用 === 比较；或直接比较语义字段（长度/是否为空/数值范围等）。</p><h2 id="练习" tabindex="-1">练习 <a class="header-anchor" href="#练习" aria-label="Permalink to &quot;练习&quot;">​</a></h2><ul><li>枚举一组 == 容易出错的对比，并给出 safer 的等效写法</li><li>解释一个历史遗留（typeof null）带来的坑，以及如何规避</li></ul>`,40)]))}const E=i(h,[["render",n]]);export{o as __pageData,E as default};
