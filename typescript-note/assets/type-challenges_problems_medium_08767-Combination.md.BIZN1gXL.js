import{_ as e,c as n,o as l,ag as i,j as a,a as h,t as p}from"./chunks/framework.C6BsaGkr.js";const u=JSON.parse('{"title":"08767 - Combination","description":"","frontmatter":{},"headers":[],"relativePath":"type-challenges/problems/medium/08767-Combination.md","filePath":"type-challenges/problems/medium/08767-Combination.md","lastUpdated":1757560412000}'),o={name:"type-challenges/problems/medium/08767-Combination.md"},r={id:"frontmatter-title",tabindex:"-1"};function k(t,s,d,g,c,y){return l(),n("div",null,[s[1]||(s[1]=i(`<p><a href="/typescript-note/type-challenges/medium.html">← 返回 Medium 目录</a></p><blockquote><p>内容来源：yuzai/type-challenge（8767-Combination.md） 原文链接：<a href="https://raw.githubusercontent.com/yuzai/type-challenge/main/docs/type-challenges/problems/medium/08767-Combination" target="_blank" rel="noreferrer">https://raw.githubusercontent.com/yuzai/type-challenge/main/docs/type-challenges/problems/medium/08767-Combination</a></p></blockquote><h1 id="_08767-combination" tabindex="-1">08767 - Combination <a class="header-anchor" href="#_08767-combination" aria-label="Permalink to &quot;08767 - Combination&quot;">​</a></h1><hr><h2 id="title-8767-实现组合lang-zh-cn" tabindex="-1">title: 8767-实现组合 lang: zh-CN <a class="header-anchor" href="#title-8767-实现组合lang-zh-cn" aria-label="Permalink to &quot;title: 8767-实现组合
lang: zh-CN&quot;">​</a></h2>`,5)),a("h1",r,[h(p(t.$frontmatter.title)+" ",1),s[0]||(s[0]=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),s[2]||(s[2]=i(`<h2 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;题目描述&quot;">​</a></h2><p>Given an array of strings, do Permutation &amp; Combination. It&#39;s also useful for the prop types like video <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controlsList" target="_blank" rel="noreferrer">controlsList</a></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// expected to be \`&quot;foo&quot; | &quot;bar&quot; | &quot;baz&quot; | &quot;foo bar&quot; | &quot;foo bar baz&quot; | &quot;foo baz&quot; | &quot;foo baz bar&quot; | &quot;bar foo&quot; | &quot;bar foo baz&quot; | &quot;bar baz&quot; | &quot;bar baz foo&quot; | &quot;baz foo&quot; | &quot;baz foo bar&quot; | &quot;baz bar&quot; | &quot;baz bar foo&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Keys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Combination</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;baz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]&gt;;</span></span></code></pre></div><h2 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h2><p>之前的题目中，已经实现了 <a href="/typescript-note/type-challenges/problems/medium/00296-实现全排列.html">全排列</a> 和实现 <a href="/typescript-note/type-challenges/problems/medium/04260-实现所有组合.html">全组合</a>。</p><p>均借助了分发特性后，用非常简洁的代码实现了全排列和全组合。</p><p>其实之前的全组合，已经实现了本题目，只不过这题目少了一种情况，空字符。</p><p>想要实现组合，即使是用 js，也挺麻烦，但是借助 ts 联合类型的分发特性帮助了我们去做遍历，反而可以比较简单的实现这个题目。</p><h2 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Combination</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 将输入的元组转成联合类型</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 保留原始的联合类型，因为分发后，就只表示自身了，想要 Exclude ，就必须保留原始的联合类型</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 触发分发特性，</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ?</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 此时 K 表示 元组中的某一个元素，将 K 加入结果中，同时递归剩余元素：Exclude&lt;C, K&gt; 即可</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 左侧的 K ，借助分发，产出了单个元素的所有结果，递归中的第一次分发，产出了所有的两个元素的结果，再次递归，产出了所有的3个元素的结果</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Combination</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;[], </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Exclude</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    :</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 永远走不到这个逻辑</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="知识点" tabindex="-1">知识点 <a class="header-anchor" href="#知识点" aria-label="Permalink to &quot;知识点&quot;">​</a></h2><ol><li><ol><li>充分理解分发特性，本质其实也算是一层遍历，层层递归，直接帮助我们轻松遍历了所有组合</li></ol></li><li>同 <a href="/typescript-note/type-challenges/problems/medium/00296-实现全排列.html">全排列</a></li><li>同 <a href="/typescript-note/type-challenges/problems/medium/00010-元组转联合.html">10-元组转联合</a></li></ol><hr><div class="nav-pager"><span>上一题：<a href="/type-challenges/problems/type-challenges/problems/medium/08640-生成一定范围内的数字">08640 生成一定范围内的数字</a></span><span style="float:right;">下一题：<a href="/type-challenges/problems/type-challenges/problems/medium/08987-Subsequence">08987 Subsequence</a></span></div>`,14))])}const b=e(o,[["render",k]]);export{u as __pageData,b as default};
