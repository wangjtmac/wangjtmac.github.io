import{_ as s,c as l,o as e,ag as a}from"./chunks/framework.C6BsaGkr.js";const o=JSON.parse('{"title":"中等挑战","description":"","frontmatter":{},"headers":[],"relativePath":"type-challenges/medium.md","filePath":"type-challenges/medium.md","lastUpdated":1755503905000}'),t={name:"type-challenges/medium.md"};function p(h,i,n,k,r,d){return e(),l("div",null,i[0]||(i[0]=[a(`<h1 id="中等挑战" tabindex="-1">中等挑战 <a class="header-anchor" href="#中等挑战" aria-label="Permalink to &quot;中等挑战&quot;">​</a></h1><p>这里收集了一些中等难度的 TypeScript 类型挑战题目。</p><h2 id="题目列表" tabindex="-1">题目列表 <a class="header-anchor" href="#题目列表" aria-label="Permalink to &quot;题目列表&quot;">​</a></h2><h3 id="题目目录-medium-本地文档" tabindex="-1">题目目录（Medium，本地文档） <a class="header-anchor" href="#题目目录-medium-本地文档" aria-label="Permalink to &quot;题目目录（Medium，本地文档）&quot;">​</a></h3><ul><li><p><a href="/typescript-note/type-challenges/problems/medium/00002-获取函数返回类型.html">00002 获取函数返回类型</a></p><ul><li>题面摘要：实现 <code>MyReturnType&lt;T&gt;</code>，获取函数 <code>T</code> 的返回类型</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00003-实现Omit.html">00003 实现Omit</a></p><ul><li>题面摘要：实现 <code>MyOmit&lt;T, K&gt;</code>，从类型 <code>T</code> 中排除属性 <code>K</code></li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00008-Readonly2.html">00008 Readonly2</a></p><ul><li>题面摘要：实现 <code>MyReadonly2&lt;T, K&gt;</code>，将 <code>T</code> 中指定的属性设为只读</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00009-实现DeepReadonly.html">00009 实现DeepReadonly</a></p><ul><li>题面摘要：实现 <code>DeepReadonly&lt;T&gt;</code>，递归地将对象的所有属性设为只读</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00010-元组转联合.html">00010 元组转联合</a></p><ul><li>题面摘要：实现 <code>TupleToUnion&lt;T&gt;</code>，将元组转换为联合类型</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00012-可串联构造器.html">00012 可串联构造器</a></p><ul><li>题面摘要：实现可串联的构造器模式</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00015-最后一个元素.html">00015 最后一个元素</a></p><ul><li>题面摘要：实现 <code>Last&lt;T&gt;</code>，获取元组的最后一个元素类型</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00016-实现Pop.html">00016 实现Pop</a></p><ul><li>题面摘要：实现 <code>Pop&lt;T&gt;</code>，移除元组的最后一个元素</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00020-实现Promise.all.html">00020 实现Promise.all</a></p><ul><li>题面摘要：实现 <code>PromiseAll&lt;T&gt;</code>，类似 <code>Promise.all</code> 的类型版本</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00062-实现TypeLookup.html">00062 实现TypeLookup</a></p><ul><li>题面摘要：实现 <code>LookUp&lt;U, T&gt;</code>，在联合类型中查找指定类型</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00106-实现TrimLeft.html">00106 实现TrimLeft</a></p><ul><li>题面摘要：实现 <code>TrimLeft&lt;S&gt;</code>，移除字符串左侧的空白字符</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00108-实现Trim.html">00108 实现Trim</a></p><ul><li>题面摘要：实现 <code>Trim&lt;S&gt;</code>，移除字符串两侧的空白字符</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00110-实现Capitalize.html">00110 实现Capitalize</a></p><ul><li>题面摘要：实现 <code>Capitalize&lt;S&gt;</code>，将字符串首字母大写</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00116-实现Replace.html">00116 实现Replace</a></p><ul><li>题面摘要：实现 <code>Replace&lt;S, From, To&gt;</code>，替换字符串中的指定部分</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00119-实现ReplaceAll.html">00119 实现ReplaceAll</a></p><ul><li>题面摘要：实现 <code>ReplaceAll&lt;S, From, To&gt;</code>，替换字符串中所有匹配的部分</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00191-追加参数.html">00191 追加参数</a></p><ul><li>题面摘要：实现 <code>AppendArgument&lt;Fn, A&gt;</code>，给函数追加一个参数</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00296-实现全排列.html">00296 实现全排列</a></p><ul><li>题面摘要：实现 <code>Permutation&lt;T&gt;</code>，生成联合类型的所有排列</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00298-计算字符的长度.html">00298 计算字符的长度</a></p><ul><li>题面摘要：实现 <code>LengthOfString&lt;S&gt;</code>，计算字符串的长度</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00459-实现Flatten.html">00459 实现Flatten</a></p><ul><li>题面摘要：实现 <code>Flatten&lt;T&gt;</code>，将嵌套数组展平</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00527-AppendToObject.html">00527 AppendToObject</a></p><ul><li>题面摘要：实现 <code>AppendToObject&lt;T, U, V&gt;</code>，给对象添加新属性</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00529-实现Absolute.html">00529 实现Absolute</a></p><ul><li>题面摘要：实现 <code>Absolute&lt;T&gt;</code>，获取数字的绝对值</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00531-字符转联合.html">00531 字符转联合</a></p><ul><li>题面摘要：实现 <code>StringToUnion&lt;T&gt;</code>，将字符串转换为字符联合类型</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00599-实现Merge.html">00599 实现Merge</a></p><ul><li>题面摘要：实现 <code>Merge&lt;F, S&gt;</code>，合并两个对象类型</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00612-实现KebabCase.html">00612 实现KebabCase</a></p><ul><li>题面摘要：实现 <code>KebabCase&lt;S&gt;</code>，将驼峰命名转换为短横线命名</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00645-实现Diff.html">00645 实现Diff</a></p><ul><li>题面摘要：实现 <code>Diff&lt;O, O1&gt;</code>，获取两个对象类型的差异</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/00949-AnyOf.html">00949 AnyOf</a></p><ul><li>题面摘要：实现 <code>AnyOf&lt;T&gt;</code>，判断数组中是否存在真值</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/01042-isNever.html">01042 isNever</a></p><ul><li>题面摘要：实现 <code>IsNever&lt;T&gt;</code>，判断类型是否为 never</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/01097-isUnion.html">01097 isUnion</a></p><ul><li>题面摘要：实现 <code>IsUnion&lt;T&gt;</code>，判断类型是否为联合类型</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/01130-实现ReplaceKeys.html">01130 实现ReplaceKeys</a></p><ul><li>题面摘要：实现 <code>ReplaceKeys&lt;Obj, Keys, T&gt;</code>，替换对象中指定键的类型</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/01367-移除索引签名.html">01367 移除索引签名</a></p><ul><li>题面摘要：实现 <code>RemoveIndexSignature&lt;T&gt;</code>，移除对象的索引签名</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/01978-百分比解析器.html">01978 百分比解析器</a></p><ul><li>题面摘要：实现百分比字符串的解析</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/02070-从字符串中剔除指定字符.html">02070 从字符串中剔除指定字符</a></p><ul><li>题面摘要：实现 <code>DropString&lt;S, R&gt;</code>，从字符串中移除指定字符</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/02257-减一.html">02257 减一</a></p><ul><li>题面摘要：实现 <code>MinusOne&lt;T&gt;</code>，数字减一操作</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/02595-实现PickByType.html">02595 实现PickByType</a></p><ul><li>题面摘要：实现 <code>PickByType&lt;T, U&gt;</code>，根据值类型选择属性</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/02688-实现StartWith.html">02688 实现StartWith</a></p><ul><li>题面摘要：实现 <code>StartsWith&lt;T, U&gt;</code>，判断字符串是否以指定前缀开始</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/02693-实现EndsWith.html">02693 实现EndsWith</a></p><ul><li>题面摘要：实现 <code>EndsWith&lt;T, U&gt;</code>，判断字符串是否以指定后缀结束</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/02757-实现PartialByKeys.html">02757 实现PartialByKeys</a></p><ul><li>题面摘要：实现 <code>PartialByKeys&lt;T, K&gt;</code>，将指定属性设为可选</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/02759-实现RequiredByKeys.html">02759 实现RequiredByKeys</a></p><ul><li>题面摘要：实现 <code>RequiredByKeys&lt;T, K&gt;</code>，将指定属性设为必需</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/02793-实现Mutable.html">02793 实现Mutable</a></p><ul><li>题面摘要：实现 <code>Mutable&lt;T&gt;</code>，移除所有 readonly 修饰符</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/02852-实现OmitByType.html">02852 实现OmitByType</a></p><ul><li>题面摘要：实现 <code>OmitByType&lt;T, U&gt;</code>，根据值类型排除属性</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/02946-实现ObjectEntries.html">02946 实现ObjectEntries</a></p><ul><li>题面摘要：实现 <code>ObjectEntries&lt;T&gt;</code>，类似 <code>Object.entries</code> 的类型版本</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/03062-实现Shift.html">03062 实现Shift</a></p><ul><li>题面摘要：实现 <code>Shift&lt;T&gt;</code>，移除元组的第一个元素</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/03188-元组转nested对象.html">03188 元组转nested对象</a></p><ul><li>题面摘要：实现 <code>TupleToNestedObject&lt;T, U&gt;</code>，将元组转换为嵌套对象</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/03192-实现Reverse.html">03192 实现Reverse</a></p><ul><li>题面摘要：实现 <code>Reverse&lt;T&gt;</code>，反转元组</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/03196-反转入参.html">03196 反转入参</a></p><ul><li>题面摘要：实现 <code>FlipArguments&lt;T&gt;</code>，反转函数参数</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/03242-实现FlattenDepth.html">03242 实现FlattenDepth</a></p><ul><li>题面摘要：实现 <code>FlattenDepth&lt;T, U&gt;</code>，按指定深度展平数组</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/03326-BEMstylestring.html">03326 BEMstylestring</a></p><ul><li>题面摘要：实现 BEM 样式字符串的生成</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/03376-实现中序遍历.html">03376 实现中序遍历</a></p><ul><li>题面摘要：实现二叉树的中序遍历类型</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/04179-实现Flip.html">04179 实现Flip</a></p><ul><li>题面摘要：实现 <code>Flip&lt;T&gt;</code>，翻转对象的键值对</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/04182-实现斐波那契序列.html">04182 实现斐波那契序列</a></p><ul><li>题面摘要：实现斐波那契数列的类型版本</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/04260-实现所有组合.html">04260 实现所有组合</a></p><ul><li>题面摘要：实现 <code>Combinations&lt;T&gt;</code>，生成所有可能的组合</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/04425-实现比较.html">04425 实现比较</a></p><ul><li>题面摘要：实现数字比较的类型版本</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/04471-实现Zip.html">04471 实现Zip</a></p><ul><li>题面摘要：实现 <code>Zip&lt;T, U&gt;</code>，将两个元组进行压缩</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/04484-isUnion.html">04484 isUnion</a></p><ul><li>题面摘要：实现 <code>IsUnion&lt;T&gt;</code>，判断类型是否为联合类型</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/04499-Chunk.html">04499 Chunk</a></p><ul><li>题面摘要：实现 <code>Chunk&lt;T, N&gt;</code>，将数组分块</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/04518-fill.html">04518 fill</a></p><ul><li>题面摘要：实现 <code>Fill&lt;T, N, Start?, End?&gt;</code>，填充数组</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/04803-TrimRight.html">04803 TrimRight</a></p><ul><li>题面摘要：实现 <code>TrimRight&lt;S&gt;</code>，移除字符串右侧空白</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/05117-去除数组指定元素.html">05117 去除数组指定元素</a></p><ul><li>题面摘要：实现 <code>Without&lt;T, U&gt;</code>，从数组中移除指定元素</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/05140-Trunc.html">05140 Trunc</a></p><ul><li>题面摘要：实现 <code>Trunc&lt;T&gt;</code>，截断数字的小数部分</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/05153-IndexOf.html">05153 IndexOf</a></p><ul><li>题面摘要：实现 <code>IndexOf&lt;T, U&gt;</code>，查找元素在数组中的索引</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/05310-Join.html">05310 Join</a></p><ul><li>题面摘要：实现 <code>Join&lt;T, U&gt;</code>，将数组元素连接成字符串</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/05317-LastIndexOf.html">05317 LastIndexOf</a></p><ul><li>题面摘要：实现 <code>LastIndexOf&lt;T, U&gt;</code>，查找元素在数组中的最后索引</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/05360-unique.html">05360 unique</a></p><ul><li>题面摘要：实现 <code>Unique&lt;T&gt;</code>，去除数组中的重复元素</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/05821-MapTypes.html">05821 MapTypes</a></p><ul><li>题面摘要：实现 <code>MapTypes&lt;T, R&gt;</code>，映射对象的值类型</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/07544-构造一个给定长度的元组.html">07544 构造一个给定长度的元组</a></p><ul><li>题面摘要：实现 <code>Tuple&lt;L, T&gt;</code>，构造指定长度的元组</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/08640-生成一定范围内的数字.html">08640 生成一定范围内的数字</a></p><ul><li>题面摘要：实现 <code>NumberRange&lt;L, H&gt;</code>，生成数字范围</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/08767-Combination.html">08767 Combination</a></p><ul><li>题面摘要：实现 <code>Combination&lt;T&gt;</code>，生成组合类型</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/08987-Subsequence.html">08987 Subsequence</a></p><ul><li>题面摘要：实现 <code>Subsequence&lt;T&gt;</code>，生成子序列</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/09142-CheckRepeatedChars.html">09142 CheckRepeatedChars</a></p><ul><li>题面摘要：实现 <code>CheckRepeatedChars&lt;T&gt;</code>，检查字符串中的重复字符</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/09286-FirstUniqueCharIndex.html">09286 FirstUniqueCharIndex</a></p><ul><li>题面摘要：实现 <code>FirstUniqueCharIndex&lt;T&gt;</code>，查找第一个唯一字符的索引</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/09896-获取数组的中间元素.html">09896 获取数组的中间元素</a></p><ul><li>题面摘要：实现 <code>GetMiddleElement&lt;T&gt;</code>，获取数组的中间元素</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/10969-整数.html">10969 整数</a></p><ul><li>题面摘要：实现 <code>Integer&lt;T&gt;</code>，判断是否为整数</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/16259-转换为基本类型.html">16259 转换为基本类型</a></p><ul><li>题面摘要：实现 <code>ToPrimitive&lt;T&gt;</code>，转换为基本类型</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/17973-DeepMutatable.html">17973 DeepMutatable</a></p><ul><li>题面摘要：实现 <code>DeepMutable&lt;T&gt;</code>，深度可变类型</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/18142-all.html">18142 all</a></p><ul><li>题面摘要：实现 <code>All&lt;T, U&gt;</code>，判断所有元素是否满足条件</li></ul></li><li><p><a href="/typescript-note/type-challenges/problems/medium/18220-filter.html">18220 filter</a></p><ul><li>题面摘要：实现 <code>Filter&lt;T, A&gt;</code>，过滤数组元素</li></ul></li></ul><h2 id="使用说明" tabindex="-1">使用说明 <a class="header-anchor" href="#使用说明" aria-label="Permalink to &quot;使用说明&quot;">​</a></h2><ul><li>点击上面的&quot;本地文档&quot;链接查看每题的完整题面与解答</li><li>本页仅作为&quot;目录与摘要&quot;使用，避免与题目页面重复</li><li>建议按照题目编号顺序学习，循序渐进</li></ul><h2 id="学习建议" tabindex="-1">学习建议 <a class="header-anchor" href="#学习建议" aria-label="Permalink to &quot;学习建议&quot;">​</a></h2><ol><li><strong>基础先行</strong>：确保已掌握 Easy 级别的所有题目</li><li><strong>理解原理</strong>：重点关注类型系统的核心概念</li><li><strong>实践练习</strong>：在 <code>examples/advanced/type-challenges.ts</code> 中编写解题代码</li><li><strong>记录笔记</strong>：在记忆库中记录解题思路和技巧</li><li><strong>参考技巧</strong>：结合 <code>techniques.md</code> 和 <code>solving-guide.md</code> 学习</li></ol><h2 id="历史内容" tabindex="-1">历史内容 <a class="header-anchor" href="#历史内容" aria-label="Permalink to &quot;历史内容&quot;">​</a></h2><details><summary>历史内容（已迁移，点击展开）</summary><h3 id="_1-simple-vue" tabindex="-1">1. Simple Vue <a class="header-anchor" href="#_1-simple-vue" aria-label="Permalink to &quot;1. Simple Vue&quot;">​</a></h3><p>实现类似 Vue 的类型声明。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleVue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SimpleVue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      firstname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      lastname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Challenges&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      amount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    fullname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      return</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">firstname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> + &#39; &#39; + </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">lastname</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    hi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fullname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="_2-currying" tabindex="-1">2. Currying <a class="header-anchor" href="#_2-currying" aria-label="Permalink to &quot;2. Currying&quot;">​</a></h3><p>实现柯里化函数的类型定义。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> three</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> curriedAdd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Currying</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(add)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> five</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curriedAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_3-union-to-intersection" tabindex="-1">3. Union to Intersection <a class="header-anchor" href="#_3-union-to-intersection" aria-label="Permalink to &quot;3. Union to Intersection&quot;">​</a></h3><p>实现 <code>UnionToIntersection&lt;T&gt;</code> 类型，将联合类型转换为交叉类型。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> I</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UnionToIntersection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// expected to be &#39;foo&#39; &amp; 42 &amp; true</span></span></code></pre></div><h2 id="解答-含要点" tabindex="-1">解答（含要点） <a class="header-anchor" href="#解答-含要点" aria-label="Permalink to &quot;解答（含要点）&quot;">​</a></h2><h3 id="_1-simple-vue-核心思路" tabindex="-1">1. Simple Vue（核心思路） <a class="header-anchor" href="#_1-simple-vue-核心思路" aria-label="Permalink to &quot;1. Simple Vue（核心思路）&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 说明：以下为思路骨架，并非完整的官方题解</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 关键：根据 data/computed/methods 推导 this，确保互相可见且只读/可写正确</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DataFn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Computed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Methods</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComputedReturn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReturnType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]&gt; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DataFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">M</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> D</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  computed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  methods</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> M</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleVue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DataFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">M</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">M</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> never</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 禁止外部 this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 完整实现需：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - data 返回值作为实例字段（可写）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - computed 为只读且基于 this 访问 data/computed</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - methods 可访问 data/computed，且 this 正确</span></span></code></pre></div><p>要点：</p><ul><li>this 上下文类型通过交叉：ThisType 辅助或在泛型位置构造 this</li><li>计算属性类型需要 ReturnType 提取</li><li>data 返回值应是展开后的对象类型</li></ul><hr><h3 id="_2-currying-柯里化" tabindex="-1">2. Currying（柯里化） <a class="header-anchor" href="#_2-currying-柯里化" aria-label="Permalink to &quot;2. Currying（柯里化）&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以二元函数为例的泛化版本</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Curry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> infer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> infer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> R</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">infer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...infer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Curry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> R</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> R</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> never</span></span></code></pre></div></details>`,11)]))}const g=s(t,[["render",p]]);export{o as __pageData,g as default};
