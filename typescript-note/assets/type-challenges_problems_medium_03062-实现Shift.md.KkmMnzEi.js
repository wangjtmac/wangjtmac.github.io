import{_ as t,c as h,o as l,ag as i,j as a,a as n,t as p}from"./chunks/framework.C6BsaGkr.js";const E=JSON.parse('{"title":"03062 - 实现Shift","description":"","frontmatter":{},"headers":[],"relativePath":"type-challenges/problems/medium/03062-实现Shift.md","filePath":"type-challenges/problems/medium/03062-实现Shift.md","lastUpdated":1757560412000}'),r={name:"type-challenges/problems/medium/03062-实现Shift.md"},k={id:"frontmatter-title",tabindex:"-1"};function d(e,s,o,c,g,m){return l(),h("div",null,[s[1]||(s[1]=i(`<p><a href="/typescript-note/type-challenges/medium.html">← 返回 Medium 目录</a></p><blockquote><p>内容来源：yuzai/type-challenge（3062-实现Shift.md） 原文链接：<a href="https://raw.githubusercontent.com/yuzai/type-challenge/main/docs/type-challenges/problems/medium/03062-%E5%AE%9E%E7%8E%B0Shift" target="_blank" rel="noreferrer">https://raw.githubusercontent.com/yuzai/type-challenge/main/docs/type-challenges/problems/medium/03062-实现Shift</a></p></blockquote><h1 id="_03062-实现shift" tabindex="-1">03062 - 实现Shift <a class="header-anchor" href="#_03062-实现shift" aria-label="Permalink to &quot;03062 - 实现Shift&quot;">​</a></h1><hr><h2 id="title-3062-实现shiftlang-zh-cn" tabindex="-1">title: 3062-实现Shift lang: zh-CN <a class="header-anchor" href="#title-3062-实现shiftlang-zh-cn" aria-label="Permalink to &quot;title: 3062-实现Shift
lang: zh-CN&quot;">​</a></h2>`,5)),a("h1",k,[n(p(e.$frontmatter.title)+" ",1),s[0]||(s[0]=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),s[2]||(s[2]=i('<h2 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;题目描述&quot;">​</a></h2><p>Implement the type version of <code>Array.shift</code></p><p>For example</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shift</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [2, 1]</span></span></code></pre></div><h2 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h2><p>其实和 <a href="/typescript-note/type-challenges/problems/medium/00016-实现Pop.html">实现 Pop</a> 一样，只需要推断匹配出剩余元素并返回即可</p><h2 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shift</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">infer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...infer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> R</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> R</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span></code></pre></div><p>推断出除了第一个元素的剩余元素，就是题目要求的类型。</p><h2 id="知识点" tabindex="-1">知识点 <a class="header-anchor" href="#知识点" aria-label="Permalink to &quot;知识点&quot;">​</a></h2><ol><li>同 <a href="/typescript-note/type-challenges/problems/medium/00016-实现Pop.html">实现 Pop</a></li></ol><hr><div class="nav-pager"><span>上一题：<a href="/type-challenges/problems/type-challenges/problems/medium/02946-实现ObjectEntries">02946 实现ObjectEntries</a></span><span style="float:right;">下一题：<a href="/type-challenges/problems/type-challenges/problems/medium/03188-元组转nested对象">03188 元组转nested对象</a></span></div>',13))])}const f=t(r,[["render",d]]);export{E as __pageData,f as default};
