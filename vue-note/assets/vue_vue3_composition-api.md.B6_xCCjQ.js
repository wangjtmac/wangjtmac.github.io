import{_ as a,c as i,o,ag as t}from"./chunks/framework.D7tYYb9F.js";const u=JSON.parse('{"title":"Vue3 组合式 API","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vue3/composition-api.md","filePath":"vue/vue3/composition-api.md","lastUpdated":1751729011000}'),l={name:"vue/vue3/composition-api.md"};function r(c,e,p,s,n,d){return o(),i("div",null,e[0]||(e[0]=[t('<h1 id="vue3-组合式-api" tabindex="-1">Vue3 组合式 API <a class="header-anchor" href="#vue3-组合式-api" aria-label="Permalink to &quot;Vue3 组合式 API&quot;">​</a></h1><p>组合式 API (Composition API) 是 Vue 3 中引入的一种新的组件逻辑组织方式，它允许我们按照逻辑关注点组织组件代码，而不是按照选项类型。这使得在处理复杂组件时代码更加清晰和可维护。</p><h2 id="为什么需要组合式-api" tabindex="-1">为什么需要组合式 API <a class="header-anchor" href="#为什么需要组合式-api" aria-label="Permalink to &quot;为什么需要组合式 API&quot;">​</a></h2><p>在 Vue 2 中，我们使用选项式 API (Options API) 来组织组件逻辑，将数据、方法、计算属性等分散在不同的选项中。这在小型组件中工作良好，但在大型组件中，相关的逻辑会分散在不同的选项中，导致代码难以理解和维护。</p><p>组合式 API 通过将相关逻辑组合在一起，解决了这个问题，使得代码更加模块化和可复用。</p><h2 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h2><p>组合式 API 的核心是 <code>setup</code> 函数，它是组件的入口点，在组件实例创建之前执行。在 <code>setup</code> 函数中，我们可以使用一系列的组合式函数来组织组件逻辑。</p><h2 id="本章内容" tabindex="-1">本章内容 <a class="header-anchor" href="#本章内容" aria-label="Permalink to &quot;本章内容&quot;">​</a></h2><ul><li><a href="./setup-function.html">setup 函数与组合式函数</a></li><li><a href="./reactivity-core.html">响应式核心</a></li><li><a href="./lifecycle-hooks-composition.html">生命周期钩子函数</a></li><li><a href="./dependency-injection.html">依赖注入</a></li><li><a href="./template-refs.html">模板引用</a></li><li><a href="./composables.html">组合式函数（Composables）</a></li></ul><h2 id="学习路径" tabindex="-1">学习路径 <a class="header-anchor" href="#学习路径" aria-label="Permalink to &quot;学习路径&quot;">​</a></h2><ol><li>首先了解 <code>setup</code> 函数的基本用法和特性</li><li>学习响应式系统的核心 API，如 <code>ref</code>、<code>reactive</code>、<code>computed</code> 等</li><li>掌握组合式 API 中的生命周期钩子函数</li><li>了解依赖注入在组合式 API 中的实现</li><li>学习如何在组合式 API 中使用模板引用</li><li>最后学习如何创建和使用组合式函数，实现逻辑复用</li></ol><p>通过系统学习这些内容，你将能够充分利用 Vue 3 组合式 API 的强大功能，编写更加清晰、可维护的组件代码。</p>',12)]))}const m=a(l,[["render",r]]);export{u as __pageData,m as default};
