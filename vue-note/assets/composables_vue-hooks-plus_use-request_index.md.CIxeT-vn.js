import{_ as e,c as i,o as s,ag as l}from"./chunks/framework.D7tYYb9F.js";const c=JSON.parse('{"title":"useRequest 详解","description":"","frontmatter":{},"headers":[],"relativePath":"composables/vue-hooks-plus/use-request/index.md","filePath":"composables/vue-hooks-plus/use-request/index.md","lastUpdated":null}'),t={name:"composables/vue-hooks-plus/use-request/index.md"};function r(h,a,n,o,d,p){return s(),i("div",null,a[0]||(a[0]=[l(`<h1 id="userequest-详解" tabindex="-1">useRequest 详解 <a class="header-anchor" href="#userequest-详解" aria-label="Permalink to &quot;useRequest 详解&quot;">​</a></h1><p>useRequest 是 Vue Hooks Plus 库中最核心的功能之一，它提供了强大的数据请求管理能力。本节将详细介绍 useRequest 的各种用法和特性。</p><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>useRequest 是一个用于管理异步数据请求的组合式函数，它提供了丰富的功能来简化数据请求的处理，包括：</p><ul><li>自动管理 loading 状态</li><li>错误处理</li><li>数据缓存</li><li>请求防抖和节流</li><li>轮询</li><li>并行请求</li><li>依赖请求</li><li>分页和加载更多</li><li>错误重试</li></ul><h2 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useRequest } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue-hooks-plus&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(service, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 配置选项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="核心特性" tabindex="-1">核心特性 <a class="header-anchor" href="#核心特性" aria-label="Permalink to &quot;核心特性&quot;">​</a></h2><h3 id="_1-基本用法" tabindex="-1">1. <a href="./basic.html">基本用法</a> <a class="header-anchor" href="#_1-基本用法" aria-label="Permalink to &quot;1. [基本用法](./basic.md)&quot;">​</a></h3><p>了解 useRequest 的基础使用方法，包括基本的数据请求和状态管理。</p><h3 id="_2-轮询" tabindex="-1">2. <a href="./polling.html">轮询</a> <a class="header-anchor" href="#_2-轮询" aria-label="Permalink to &quot;2. [轮询](./polling.md)&quot;">​</a></h3><p>学习如何使用 useRequest 实现数据轮询功能。</p><h3 id="_3-并行请求" tabindex="-1">3. <a href="./concurrent.html">并行请求</a> <a class="header-anchor" href="#_3-并行请求" aria-label="Permalink to &quot;3. [并行请求](./concurrent.md)&quot;">​</a></h3><p>掌握如何使用 useRequest 处理多个并行请求。</p><h3 id="_4-防抖与节流" tabindex="-1">4. <a href="./debounce.html">防抖与节流</a> <a class="header-anchor" href="#_4-防抖与节流" aria-label="Permalink to &quot;4. [防抖与节流](./debounce.md)&quot;">​</a></h3><p>了解如何使用防抖和节流来优化请求性能。</p><h3 id="_5-缓存与预加载" tabindex="-1">5. <a href="./cache.html">缓存与预加载</a> <a class="header-anchor" href="#_5-缓存与预加载" aria-label="Permalink to &quot;5. [缓存与预加载](./cache.md)&quot;">​</a></h3><p>学习 useRequest 的缓存机制和预加载功能。</p><h3 id="_6-加载更多" tabindex="-1">6. <a href="./loadMore.html">加载更多</a> <a class="header-anchor" href="#_6-加载更多" aria-label="Permalink to &quot;6. [加载更多](./loadMore.md)&quot;">​</a></h3><p>实现分页和加载更多功能。</p><h3 id="_7-错误重试" tabindex="-1">7. <a href="./retry.html">错误重试</a> <a class="header-anchor" href="#_7-错误重试" aria-label="Permalink to &quot;7. [错误重试](./retry.md)&quot;">​</a></h3><p>配置请求失败时的重试机制。</p><h2 id="api-参考" tabindex="-1">API 参考 <a class="header-anchor" href="#api-参考" aria-label="Permalink to &quot;API 参考&quot;">​</a></h2><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><code>service</code>: 请求函数，返回 Promise</li><li><code>options</code>: 配置选项对象</li></ul><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><ul><li><code>data</code>: 请求返回的数据</li><li><code>loading</code>: 请求加载状态</li><li><code>error</code>: 请求错误信息</li><li><code>run</code>: 手动触发请求的函数</li><li><code>runAsync</code>: 手动触发请求的异步函数</li><li><code>refresh</code>: 刷新请求</li><li><code>mutate</code>: 直接修改数据</li><li><code>cancel</code>: 取消请求</li></ul><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><ol><li><strong>合理使用缓存</strong>: 对于不经常变化的数据，启用缓存可以提高用户体验</li><li><strong>错误处理</strong>: 始终处理请求可能出现的错误情况</li><li><strong>防抖节流</strong>: 对于用户输入触发的请求，使用防抖或节流来减少不必要的请求</li><li><strong>取消请求</strong>: 在组件卸载时取消正在进行的请求，避免内存泄漏</li></ol><h2 id="示例项目" tabindex="-1">示例项目 <a class="header-anchor" href="#示例项目" aria-label="Permalink to &quot;示例项目&quot;">​</a></h2><p>查看完整的示例项目，了解 useRequest 在实际项目中的应用。</p><h2 id="与其他库的对比" tabindex="-1">与其他库的对比 <a class="header-anchor" href="#与其他库的对比" aria-label="Permalink to &quot;与其他库的对比&quot;">​</a></h2><p>useRequest 相比于其他数据请求库的优势：</p><ul><li>更简洁的 API 设计</li><li>更丰富的功能特性</li><li>更好的 TypeScript 支持</li><li>更灵活的配置选项</li></ul>`,34)]))}const k=e(t,[["render",r]]);export{c as __pageData,k as default};
