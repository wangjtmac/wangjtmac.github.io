import{_ as a,c as t,o as i,ag as l}from"./chunks/framework.D7tYYb9F.js";const V=JSON.parse('{"title":"Vue 简介","description":"","frontmatter":{},"headers":[],"relativePath":"vue/index.md","filePath":"vue/index.md","lastUpdated":1751328890000}'),r={name:"vue/index.md"};function u(o,e,n,s,h,d){return i(),t("div",null,e[0]||(e[0]=[l('<h1 id="vue-简介" tabindex="-1">Vue 简介 <a class="header-anchor" href="#vue-简介" aria-label="Permalink to &quot;Vue 简介&quot;">​</a></h1><p>Vue.js 是一个用于构建用户界面的渐进式框架。与其他大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p><h2 id="vue-的特点" tabindex="-1">Vue 的特点 <a class="header-anchor" href="#vue-的特点" aria-label="Permalink to &quot;Vue 的特点&quot;">​</a></h2><ul><li><strong>渐进式框架</strong>：可以根据需求逐渐引入 Vue 的不同部分</li><li><strong>响应式系统</strong>：基于依赖追踪的响应式系统，数据变化时自动更新视图</li><li><strong>组件化</strong>：构建可复用的组件，组合成复杂的应用</li><li><strong>虚拟 DOM</strong>：高效的 DOM 更新策略</li><li><strong>单文件组件</strong>：将组件的模板、逻辑和样式封装在一个文件中</li></ul><h2 id="vue-的版本" tabindex="-1">Vue 的版本 <a class="header-anchor" href="#vue-的版本" aria-label="Permalink to &quot;Vue 的版本&quot;">​</a></h2><h3 id="vue-2" tabindex="-1">Vue 2 <a class="header-anchor" href="#vue-2" aria-label="Permalink to &quot;Vue 2&quot;">​</a></h3><p>Vue 2 于 2016 年发布，是目前仍有大量项目在使用的版本。Vue 2 引入了虚拟 DOM、服务端渲染等特性，并且有完善的生态系统支持。</p><p>主要特点：</p><ul><li>使用 Object.defineProperty 实现响应式</li><li>模板编译为渲染函数</li><li>基于选项式 API</li></ul><h3 id="vue-3" tabindex="-1">Vue 3 <a class="header-anchor" href="#vue-3" aria-label="Permalink to &quot;Vue 3&quot;">​</a></h3><p>Vue 3 于 2020 年发布，带来了许多重大改进和新特性。</p><p>主要特点：</p><ul><li>使用 Proxy 重写响应式系统，提供更好的性能和更完整的响应式覆盖</li><li>组合式 API，提供更灵活的逻辑复用方式</li><li>TypeScript 支持更好</li><li>更小的包体积，通过 tree-shaking 优化</li><li>更好的性能，包括更快的虚拟 DOM 和编译优化</li></ul><h2 id="项目初始化" tabindex="-1">项目初始化 <a class="header-anchor" href="#项目初始化" aria-label="Permalink to &quot;项目初始化&quot;">​</a></h2><p>正确初始化 Vue 项目对于后续开发至关重要。在我们的 <a href="/vue-note/vue/project-setup.html">项目初始化指南</a> 中，提供了使用 Vite 和 Vue CLI 创建 Vue 项目的标准化流程，以及解决常见问题的方法，特别是关于 TypeScript 类型声明的问题。</p><p>无论您是使用 Vite（Vue 3 推荐）还是 Vue CLI 创建项目，都能找到详细的步骤指导和配置说明，确保项目有一个健康的开始，避免常见的&quot;找不到模块&#39;vue&#39;或其相应的类型声明&quot;等错误。</p><h2 id="学习路径" tabindex="-1">学习路径 <a class="header-anchor" href="#学习路径" aria-label="Permalink to &quot;学习路径&quot;">​</a></h2><p>在这个笔记系列中，我们将系统地学习 Vue 的各个方面：</p><ol><li><strong>基础知识</strong>：Vue 的核心概念和基本用法</li><li><strong>深入理解</strong>：Vue 的响应式原理、模板编译和渲染机制</li><li><strong>生态系统</strong>：Vue Router、Vuex、Pinia 等</li><li><strong>UI 框架</strong>：Element UI、Element Plus、Vant 等</li><li><strong>源码解析</strong>：深入理解 Vue 及其生态系统的实现原理</li></ol><p>通过理论学习和实践项目相结合的方式，我们将全面掌握 Vue 生态系统。</p>',20)]))}const c=a(r,[["render",u]]);export{V as __pageData,c as default};
