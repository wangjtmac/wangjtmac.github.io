import{_ as a,c as t,o as i,ag as l}from"./chunks/framework.D7tYYb9F.js";const _=JSON.parse('{"title":"Vue组合式函数库指南","description":"","frontmatter":{},"headers":[],"relativePath":"guide/index.md","filePath":"guide/index.md","lastUpdated":1751729011000}'),r={name:"guide/index.md"};function o(n,e,s,d,h,c){return i(),t("div",null,e[0]||(e[0]=[l('<h1 id="vue组合式函数库指南" tabindex="-1">Vue组合式函数库指南 <a class="header-anchor" href="#vue组合式函数库指南" aria-label="Permalink to &quot;Vue组合式函数库指南&quot;">​</a></h1><p>本节提供Vue组合式函数库的入门指南、最佳实践和选择决策树，帮助开发者在实际项目中合理选择和使用组合式函数库。</p><h2 id="内容目录" tabindex="-1">内容目录 <a class="header-anchor" href="#内容目录" aria-label="Permalink to &quot;内容目录&quot;">​</a></h2><ul><li><a href="./getting-started.html">入门指南</a></li><li><a href="./best-practices.html">最佳实践</a></li><li><a href="./decision-tree.html">选择决策树</a></li></ul><h2 id="指南目标" tabindex="-1">指南目标 <a class="header-anchor" href="#指南目标" aria-label="Permalink to &quot;指南目标&quot;">​</a></h2><ol><li>帮助开发者快速上手组合式函数库</li><li>提供组合式函数库的最佳实践</li><li>指导开发者在不同场景下选择合适的组合式函数库</li><li>避免常见的陷阱和问题</li></ol><h2 id="使用建议" tabindex="-1">使用建议 <a class="header-anchor" href="#使用建议" aria-label="Permalink to &quot;使用建议&quot;">​</a></h2><p>组合式函数库可以大幅提高开发效率，但也需要合理使用。以下是一些一般性建议：</p><ol><li><strong>按需引入</strong>：只引入需要的函数，避免增加不必要的包大小</li><li><strong>理解原理</strong>：了解函数的实现原理，避免黑盒使用</li><li><strong>组合使用</strong>：可以组合使用不同库的函数，取长补短</li><li><strong>考虑性能</strong>：在性能敏感的场景，注意函数的性能表现</li><li><strong>类型安全</strong>：充分利用TypeScript类型定义，提高代码质量</li></ol>',9)]))}const p=a(r,[["render",o]]);export{_ as __pageData,p as default};
