import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.4lVnIIy3.js";const c=JSON.parse('{"title":"React 介绍","description":"","frontmatter":{},"headers":[],"relativePath":"react-basics/introduction.md","filePath":"react-basics/introduction.md"}'),l={name:"react-basics/introduction.md"};function e(h,s,p,k,r,E){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="react-介绍" tabindex="-1">React 介绍 <a class="header-anchor" href="#react-介绍" aria-label="Permalink to &quot;React 介绍&quot;">​</a></h1><p>React 是由 Facebook 开发的 JavaScript 库，用于构建用户界面，特别是单页应用程序。它于 2013 年开源，现已成为前端开发中最流行的库之一。</p><h2 id="react-的核心理念" tabindex="-1">React 的核心理念 <a class="header-anchor" href="#react-的核心理念" aria-label="Permalink to &quot;React 的核心理念&quot;">​</a></h2><p>React 的设计基于以下几个核心理念：</p><h3 id="_1-组件化" tabindex="-1">1. 组件化 <a class="header-anchor" href="#_1-组件化" aria-label="Permalink to &quot;1. 组件化&quot;">​</a></h3><p>React 应用由多个独立、可复用的组件构建而成。组件是 React 应用的基本构建块，它们将 UI 拆分为独立、可重用的部分，每个部分都可以独立思考。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一个简单的 React 组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Welcome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;你好，{props.name}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-声明式编程" tabindex="-1">2. 声明式编程 <a class="header-anchor" href="#_2-声明式编程" aria-label="Permalink to &quot;2. 声明式编程&quot;">​</a></h3><p>React 使用声明式范式，让你可以直观地描述 UI 应该呈现的样子，而不必关心如何实现 DOM 操作。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 命令式编程（直接操作 DOM）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> root</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;你好，世界！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明式编程（使用 React）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;你好，世界！&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element);</span></span></code></pre></div><h3 id="_3-单向数据流" tabindex="-1">3. 单向数据流 <a class="header-anchor" href="#_3-单向数据流" aria-label="Permalink to &quot;3. 单向数据流&quot;">​</a></h3><p>React 中的数据流是单向的，从父组件流向子组件。这使得应用中的数据流更加可预测，更容易理解和调试。</p><h3 id="_4-虚拟-dom" tabindex="-1">4. 虚拟 DOM <a class="header-anchor" href="#_4-虚拟-dom" aria-label="Permalink to &quot;4. 虚拟 DOM&quot;">​</a></h3><p>React 使用虚拟 DOM（Virtual DOM）来提高性能。虚拟 DOM 是真实 DOM 的轻量级表示，React 通过比较虚拟 DOM 的差异来最小化对真实 DOM 的操作。</p><h2 id="react-的优势" tabindex="-1">React 的优势 <a class="header-anchor" href="#react-的优势" aria-label="Permalink to &quot;React 的优势&quot;">​</a></h2><ol><li><p><strong>高效渲染</strong>：通过虚拟 DOM 和高效的差异算法，React 能够最小化 DOM 操作，提高性能。</p></li><li><p><strong>组件复用</strong>：React 的组件化设计使得代码复用变得简单，可以构建出一致性高的 UI。</p></li><li><p><strong>单向数据流</strong>：使得应用中的数据流动更加可预测，便于调试。</p></li><li><p><strong>丰富的生态系统</strong>：React 拥有庞大的社区和丰富的第三方库，如 React Router、Redux 等。</p></li><li><p><strong>跨平台</strong>：通过 React Native，可以使用相同的组件模型开发原生移动应用。</p></li></ol><h2 id="react-与其他框架的比较" tabindex="-1">React 与其他框架的比较 <a class="header-anchor" href="#react-与其他框架的比较" aria-label="Permalink to &quot;React 与其他框架的比较&quot;">​</a></h2><p>与其他前端框架（如 Angular 和 Vue）相比，React 有以下特点：</p><ul><li><strong>专注于视图层</strong>：React 只关注视图层，不包含路由、状态管理等功能，这些需要通过其他库来实现。</li><li><strong>更灵活</strong>：React 提供了更多的自由度，允许开发者根据需要选择适合的工具和库。</li><li><strong>学习曲线</strong>：相比于 Angular，React 的学习曲线较为平缓；相比于 Vue，React 可能需要更多的 JavaScript 知识。</li></ul><h2 id="开始使用-react" tabindex="-1">开始使用 React <a class="header-anchor" href="#开始使用-react" aria-label="Permalink to &quot;开始使用 React&quot;">​</a></h2><p>要开始使用 React，你需要：</p><ol><li><p><strong>安装 Node.js 和 npm/pnpm</strong>：React 应用通常使用 npm 或 pnpm 进行包管理。</p></li><li><p><strong>创建 React 应用</strong>：使用 Create React App 或 Vite 等工具快速搭建 React 项目。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 Create React App</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-react-app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或使用 Vite</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react</span></span></code></pre></div></li><li><p><strong>学习 JSX</strong>：JSX 是 React 的核心语法，它允许你在 JavaScript 中编写类似 HTML 的代码。</p></li><li><p><strong>了解组件</strong>：学习如何创建和使用 React 组件。</p></li><li><p><strong>掌握 Props 和 State</strong>：了解如何通过 Props 传递数据，以及如何使用 State 管理组件内部状态。</p></li></ol><h2 id="实践示例" tabindex="-1">实践示例 <a class="header-anchor" href="#实践示例" aria-label="Permalink to &quot;实践示例&quot;">​</a></h2><p>在我们的实践项目中，我们将从零开始构建一个简单的 React 应用，逐步学习 React 的核心概念。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReactDOM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react-dom/client&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;我的第一个 React 应用&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;欢迎来到 React 的世界！&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> root</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReactDOM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createRoot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;);</span></span></code></pre></div><p>在接下来的章节中，我们将深入探讨 JSX、组件、Props 和 State 等 React 的核心概念。</p>`,26)]))}const g=i(l,[["render",e]]);export{c as __pageData,g as default};
