import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.4lVnIIy3.js";const E=JSON.parse('{"title":"React CSS方案","description":"","frontmatter":{"title":"React CSS方案"},"headers":[],"relativePath":"tools/css/index.md","filePath":"tools/css/index.md"}'),t={name:"tools/css/index.md"};function h(p,s,k,e,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="react-css方案" tabindex="-1">React CSS方案 <a class="header-anchor" href="#react-css方案" aria-label="Permalink to &quot;React CSS方案&quot;">​</a></h1><p>在React开发中，选择合适的CSS方案对于项目的可维护性、性能和开发效率至关重要。本文将介绍三种主流的CSS方案：CSS Modules、CSS-in-JS和CSS原子化，帮助开发者根据项目需求选择最适合的样式解决方案。</p><h2 id="_1-css-modules" tabindex="-1">1. <a href="./css-modules.html">CSS Modules</a> <a class="header-anchor" href="#_1-css-modules" aria-label="Permalink to &quot;1. [CSS Modules](./css-modules.md)&quot;">​</a></h2><p>CSS Modules是一种将CSS类名局部作用域化的技术，通过自动生成唯一的类名来避免样式冲突。</p><h3 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h3><p>CSS Modules通过构建工具（如Webpack或Vite）处理CSS文件，生成唯一的类名，确保样式只应用于指定的组件，从而避免全局命名冲突。</p><h3 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h3><ol><li>创建以<code>.module.css</code>结尾的CSS文件</li><li>在组件中导入该CSS文件</li><li>使用导入的样式对象应用类名</li></ol><h3 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Button.module.css */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#007bff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">white</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  cursor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.button:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#0056b3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Button.jsx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> styles </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./Button.module.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">onClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{styles.button} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{onClick}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {children}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Button;</span></span></code></pre></div><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ol><li><strong>局部作用域</strong>：自动生成唯一类名，避免全局命名冲突</li><li><strong>使用原生CSS</strong>：可以使用熟悉的CSS语法，无需学习新的API</li><li><strong>静态提取</strong>：在构建时提取CSS，不增加运行时开销</li><li><strong>兼容性好</strong>：可以与现有CSS工具（如SASS、Less、PostCSS）结合使用</li><li><strong>开发工具支持</strong>：编辑器和IDE对CSS的语法高亮和自动完成支持良好</li></ol><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ol><li><strong>共享样式复杂</strong>：跨组件共享样式需要额外的工具或约定</li><li><strong>动态样式有限</strong>：难以基于组件状态或属性动态生成样式</li><li><strong>需要构建配置</strong>：需要配置Webpack或其他构建工具</li><li><strong>全局样式处理</strong>：处理全局样式需要特殊语法（如<code>:global</code>）</li></ol><h3 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h3><ul><li>中大型项目，需要良好的样式模块化和可维护性</li><li>团队中有专门的CSS开发人员</li><li>需要与现有CSS工具链集成的项目</li><li>对性能和加载时间敏感的应用</li></ul><h2 id="_2-css-in-js" tabindex="-1">2. <a href="./css-in-js.html">CSS-in-JS</a> <a class="header-anchor" href="#_2-css-in-js" aria-label="Permalink to &quot;2. [CSS-in-JS](./css-in-js.md)&quot;">​</a></h2><p>CSS-in-JS是一种将样式直接写在JavaScript中的方法，使组件完全自包含，包括其样式定义。</p><h3 id="基本概念-1" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念-1" aria-label="Permalink to &quot;基本概念&quot;">​</a></h3><p>CSS-in-JS允许开发者在JavaScript文件中编写CSS，通常使用模板字符串或对象语法。最流行的实现包括styled-components和Emotion。</p><h3 id="工作原理-1" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理-1" aria-label="Permalink to &quot;工作原理&quot;">​</a></h3><ol><li>使用CSS-in-JS库（如styled-components）创建样式化组件</li><li>样式直接写在组件文件中，可以访问组件的props和state</li><li>在运行时生成CSS并注入到DOM中</li></ol><h3 id="示例代码-1" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码-1" aria-label="Permalink to &quot;示例代码&quot;">​</a></h3><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Button.jsx (使用styled-components)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> styled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;styled-components&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> StyledButton</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> styled.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">button</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  background-color: \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> props</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">primary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#007bff&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;gray&#39;};</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  color: white;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  padding: 10px 20px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  border: none;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  border-radius: 4px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  cursor: pointer;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &amp;:hover {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    background-color: \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> props</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">primary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#0056b3&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;darkgray&#39;};</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">onClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">primary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">StyledButton</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{onClick} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">primary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{primary}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {children}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">StyledButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Button;</span></span></code></pre></div><h3 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ol><li><strong>动态样式</strong>：可以基于props、state或主题动态生成样式</li><li><strong>组件封装</strong>：样式与组件逻辑共存，提高组件的自包含性</li><li><strong>避免命名冲突</strong>：自动生成唯一类名，避免样式冲突</li><li><strong>主题支持</strong>：内置对主题的支持，便于实现全局主题系统</li><li><strong>TypeScript集成</strong>：良好的类型支持和自动完成</li></ol><h3 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ol><li><strong>运行时开销</strong>：在客户端生成和注入样式会增加JavaScript执行时间</li><li><strong>学习曲线</strong>：需要学习特定库的API和模式</li><li><strong>缓存问题</strong>：动态生成的样式难以有效缓存</li><li><strong>增加包体积</strong>：引入额外的库会增加应用的总体积</li><li><strong>服务端渲染复杂性</strong>：需要特殊处理以避免样式闪烁</li></ol><h3 id="适用场景-1" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景-1" aria-label="Permalink to &quot;适用场景&quot;">​</a></h3><ul><li>需要高度动态样式的应用</li><li>组件库或设计系统开发</li><li>团队偏好JavaScript而非CSS</li><li>需要基于状态或属性频繁改变样式的组件</li><li>主题切换功能丰富的应用</li></ul><h2 id="_3-css原子化-atomic-css" tabindex="-1">3. <a href="./atomic-css.html">CSS原子化（Atomic CSS）</a> <a class="header-anchor" href="#_3-css原子化-atomic-css" aria-label="Permalink to &quot;3. [CSS原子化（Atomic CSS）](./atomic-css.md)&quot;">​</a></h2><p>原子化CSS是一种使用小型、单一用途的CSS类来构建界面的方法，最流行的实现是Tailwind CSS。</p><h3 id="基本概念-2" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念-2" aria-label="Permalink to &quot;基本概念&quot;">​</a></h3><p>原子化CSS提供了一套预定义的工具类，每个类只负责一个特定的样式属性。开发者通过组合这些类来构建UI，而不是编写自定义CSS。</p><h3 id="工作原理-2" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理-2" aria-label="Permalink to &quot;工作原理&quot;">​</a></h3><ol><li>安装原子化CSS框架（如Tailwind CSS）</li><li>在HTML/JSX中直接使用提供的工具类</li><li>通过配置文件自定义工具类的值和变体</li></ol><h3 id="示例代码-2" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码-2" aria-label="Permalink to &quot;示例代码&quot;">​</a></h3><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Button.jsx (使用Tailwind CSS)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">onClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">primary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{onClick} </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`px-5 py-2 rounded-md font-medium \${</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        primary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bg-blue-500 hover:bg-blue-600 text-white&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bg-gray-200 hover:bg-gray-300 text-gray-800&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      }\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {children}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Button;</span></span></code></pre></div><h3 id="优点-2" tabindex="-1">优点 <a class="header-anchor" href="#优点-2" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ol><li><strong>开发速度快</strong>：无需编写和维护自定义CSS，直接在HTML/JSX中应用类</li><li><strong>一致性</strong>：通过预定义的设计系统确保视觉一致性</li><li><strong>响应式设计</strong>：内置响应式类前缀（如<code>md:</code>, <code>lg:</code>）简化响应式开发</li><li><strong>减少CSS体积</strong>：通过重用原子类减少重复代码</li><li><strong>无需命名</strong>：避免为CSS类命名的心智负担</li></ol><h3 id="缺点-2" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ol><li><strong>HTML/JSX冗长</strong>：大量的类名可能导致标记难以阅读</li><li><strong>学习曲线</strong>：需要学习和记忆大量的工具类</li><li><strong>样式与标记耦合</strong>：样式直接写在HTML/JSX中，可能导致关注点分离问题</li><li><strong>自定义设计困难</strong>：对于高度自定义的设计，可能需要扩展原子类系统</li><li><strong>团队适应</strong>：传统CSS开发者可能需要时间适应这种方法</li></ol><h3 id="适用场景-2" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景-2" aria-label="Permalink to &quot;适用场景&quot;">​</a></h3><ul><li>快速原型开发和MVP项目</li><li>需要一致设计系统的团队</li><li>偏好&quot;实用优先&quot;方法的开发者</li><li>需要快速迭代的项目</li><li>小型到中型应用</li></ul><h2 id="方案对比" tabindex="-1">方案对比 <a class="header-anchor" href="#方案对比" aria-label="Permalink to &quot;方案对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>CSS Modules</th><th>CSS-in-JS</th><th>原子化CSS</th></tr></thead><tbody><tr><td>局部作用域</td><td>✅</td><td>✅</td><td>❌ (全局类)</td></tr><tr><td>动态样式</td><td>有限</td><td>✅</td><td>有限</td></tr><tr><td>运行时开销</td><td>低</td><td>高</td><td>低</td></tr><tr><td>构建时优化</td><td>✅</td><td>部分支持</td><td>✅</td></tr><tr><td>开发速度</td><td>中等</td><td>中等</td><td>快</td></tr><tr><td>维护性</td><td>高</td><td>高</td><td>中等</td></tr><tr><td>学习曲线</td><td>低</td><td>中等</td><td>中等</td></tr><tr><td>与设计系统集成</td><td>需要额外工作</td><td>良好</td><td>非常好</td></tr><tr><td>包体积影响</td><td>小</td><td>中等</td><td>小 (生产环境)</td></tr><tr><td>类型安全</td><td>需要额外工具</td><td>良好</td><td>需要额外工具</td></tr></tbody></table><h2 id="选择建议" tabindex="-1">选择建议 <a class="header-anchor" href="#选择建议" aria-label="Permalink to &quot;选择建议&quot;">​</a></h2><h3 id="何时选择css-modules" tabindex="-1">何时选择CSS Modules <a class="header-anchor" href="#何时选择css-modules" aria-label="Permalink to &quot;何时选择CSS Modules&quot;">​</a></h3><ul><li>当你需要良好的性能和较小的包体积</li><li>当团队更熟悉传统CSS开发</li><li>当你需要与现有CSS工具链集成</li><li>当你关注首屏加载性能和SEO</li></ul><h3 id="何时选择css-in-js" tabindex="-1">何时选择CSS-in-JS <a class="header-anchor" href="#何时选择css-in-js" aria-label="Permalink to &quot;何时选择CSS-in-JS&quot;">​</a></h3><ul><li>当你需要基于props或状态的动态样式</li><li>当你正在构建组件库或设计系统</li><li>当你希望组件完全自包含（包括样式）</li><li>当你需要强大的主题支持</li></ul><h3 id="何时选择原子化css" tabindex="-1">何时选择原子化CSS <a class="header-anchor" href="#何时选择原子化css" aria-label="Permalink to &quot;何时选择原子化CSS&quot;">​</a></h3><ul><li>当你需要快速开发和迭代</li><li>当你希望确保设计一致性</li><li>当你不想花时间编写和维护自定义CSS</li><li>当团队愿意采用&quot;实用优先&quot;的方法</li></ul><h2 id="混合使用策略" tabindex="-1">混合使用策略 <a class="header-anchor" href="#混合使用策略" aria-label="Permalink to &quot;混合使用策略&quot;">​</a></h2><p>在实际项目中，可以根据不同需求混合使用这些方案：</p><ol><li><strong>基础组件使用CSS-in-JS</strong>：为设计系统的基础组件提供最大的灵活性</li><li><strong>页面级组件使用CSS Modules</strong>：为较大的页面组件提供良好的性能和可维护性</li><li><strong>快速原型和简单组件使用原子化CSS</strong>：加速开发过程</li></ol><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>选择合适的CSS方案应基于项目需求、团队技能和性能考虑。没有一种方案适合所有场景，理解每种方案的优缺点可以帮助你为特定项目做出明智的决策。</p><p>无论选择哪种方案，保持一致性、可维护性和性能都是关键考虑因素。随着前端技术的不断发展，这些方案也在不断改进，为开发者提供更好的工具来构建现代React应用。</p>`,60)]))}const g=i(t,[["render",h]]);export{E as __pageData,g as default};
