import{_ as a,c as l,o as t,ag as o}from"./chunks/framework.4lVnIIy3.js";const m=JSON.parse('{"title":"React Hooks","description":"","frontmatter":{},"headers":[],"relativePath":"hooks/index.md","filePath":"hooks/index.md"}'),i={name:"hooks/index.md"};function s(r,e,u,h,n,f){return t(),l("div",null,e[0]||(e[0]=[o('<h1 id="react-hooks" tabindex="-1">React Hooks <a class="header-anchor" href="#react-hooks" aria-label="Permalink to &quot;React Hooks&quot;">​</a></h1><p>React Hooks 是 React 16.8 引入的新特性，它允许你在不编写类组件的情况下使用状态和其他 React 特性。</p><h2 id="本章内容" tabindex="-1">本章内容 <a class="header-anchor" href="#本章内容" aria-label="Permalink to &quot;本章内容&quot;">​</a></h2><ul><li><a href="./introduction.html">Hooks 简介</a> - Hooks 的基本概念和使用规则</li><li><a href="./useState.html">useState</a> - 在函数组件中使用状态（已更新）</li><li><a href="./useEffect.html">useEffect</a> - 处理副作用（已更新）</li><li><a href="./useContext.html">useContext</a> - 跨组件共享状态（已更新）</li><li><a href="./useReducer.html">useReducer</a> - 复杂状态管理（已更新）</li><li><a href="./useCallback.html">useCallback</a> - 记忆回调函数（已更新）</li><li><a href="./useMemo.html">useMemo</a> - 记忆计算结果（已更新）</li><li><a href="./useRef.html">useRef</a> - 引用DOM元素和存储可变值（已更新）</li><li><a href="./useLayoutEffect.html">useLayoutEffect</a> - DOM更新后同步执行副作用（已更新）</li><li><a href="./useInsertionEffect.html">useInsertionEffect</a> - DOM更新前执行副作用，主要用于CSS-in-JS库（已更新）</li><li><a href="./useDeferredValue.html">useDeferredValue</a> - 延迟更新非紧急的UI部分（已更新）</li><li><a href="./useTransition.html">useTransition</a> - 标记状态更新为非阻塞过渡（已更新）</li><li><a href="./useSyncExternalStore.html">useSyncExternalStore</a> - 订阅外部数据源（已更新）</li><li><a href="./useId.html">useId</a> - 生成唯一ID，用于可访问性属性（已更新）</li><li><a href="./useDebugValue.html">useDebugValue</a> - 为自定义Hook添加调试标签（已更新）</li><li><a href="./custom-hooks.html">自定义 Hooks</a> - 创建自己的 Hooks（已更新）</li></ul><h2 id="hooks-的优势" tabindex="-1">Hooks 的优势 <a class="header-anchor" href="#hooks-的优势" aria-label="Permalink to &quot;Hooks 的优势&quot;">​</a></h2><ol><li><strong>更简洁的代码</strong> - 减少了类组件中的样板代码</li><li><strong>逻辑复用</strong> - 自定义 Hooks 使得逻辑复用更加简单</li><li><strong>关注点分离</strong> - 相关逻辑可以放在一起，而不是分散在不同的生命周期方法中</li><li><strong>避免 this 的困扰</strong> - 不再需要理解 JavaScript 中 this 的工作方式</li></ol><h2 id="学习目标" tabindex="-1">学习目标 <a class="header-anchor" href="#学习目标" aria-label="Permalink to &quot;学习目标&quot;">​</a></h2><p>通过本章的学习，你将能够：</p><ol><li>理解 Hooks 的设计理念和使用规则</li><li>掌握常用 Hooks 的使用方法</li><li>学会创建自定义 Hooks 复用逻辑</li><li>使用 Hooks 重构类组件</li><li>理解 Hooks 的内部工作原理</li></ol><h2 id="更新进度" tabindex="-1">更新进度 <a class="header-anchor" href="#更新进度" aria-label="Permalink to &quot;更新进度&quot;">​</a></h2><p>我们已经根据小满的React文档更新了以下Hooks的内容：</p><ul><li><a href="./useState.html">useState</a> - 完整更新，包括基本用法、数组和对象操作、更新机制等</li><li><a href="./useEffect.html">useEffect</a> - 完整更新，包括副作用概念、执行时机、清理函数等</li><li><a href="./useContext.html">useContext</a> - 完整更新，包括基本用法、React 18/19版本差异、注意事项等</li><li><a href="./useReducer.html">useReducer</a> - 完整更新，包括基本用法、工作原理、与useState的比较等</li><li><a href="./useCallback.html">useCallback</a> - 完整更新，包括基本用法、与React.memo结合使用、实际应用示例等</li><li><a href="./useMemo.html">useMemo</a> - 完整更新，包括基本用法、避免昂贵计算、保持引用相等性等</li><li><a href="./useRef.html">useRef</a> - 完整更新，包括访问DOM元素、存储可变值、实际应用示例等</li><li><a href="./useLayoutEffect.html">useLayoutEffect</a> - 完整更新，包括与useEffect的区别、使用场景、性能考虑等</li><li><a href="./useInsertionEffect.html">useInsertionEffect</a> - 完整更新，包括CSS-in-JS库集成、执行时机、最佳实践等</li><li><a href="./useDeferredValue.html">useDeferredValue</a> - 完整更新，包括延迟更新、与useTransition比较、实际应用示例等</li><li><a href="./useTransition.html">useTransition</a> - 完整更新，包括非阻塞更新、isPending状态、使用场景等</li><li><a href="./useSyncExternalStore.html">useSyncExternalStore</a> - 完整更新，包括外部数据源订阅、并发模式安全、服务端渲染支持等</li><li><a href="./useId.html">useId</a> - 完整更新，包括可访问性属性、服务端渲染一致性、最佳实践等</li><li><a href="./useDebugValue.html">useDebugValue</a> - 完整更新，包括自定义Hook调试、格式化函数、与React DevTools集成等</li><li><a href="./custom-hooks.html">自定义 Hooks</a> - 完整更新，包括创建规则、常用示例、最佳实践等</li></ul><p>所有Hooks文档已全部更新完成！</p><p>让我们开始 React Hooks 的学习之旅吧！</p>',14)]))}const d=a(i,[["render",s]]);export{m as __pageData,d as default};
